// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskSchedule.DAL;

#nullable disable

namespace TaskSchedule.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231215081952_fix-nullable")]
    partial class fixnullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskSchedule.DAL.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.BoardTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardTasks");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskDelete")
                        .HasColumnType("int");

                    b.Property<int>("TaskRead")
                        .HasColumnType("int");

                    b.Property<int>("TaskWrite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.UserBoardRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoardId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBoardRoles");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.Board", b =>
                {
                    b.HasOne("TaskSchedule.DAL.Models.User", "Owner")
                        .WithMany("Boards")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.BoardTask", b =>
                {
                    b.HasOne("TaskSchedule.DAL.Models.User", "AssignedUser")
                        .WithMany("BoardTasks")
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("TaskSchedule.DAL.Models.Board", "Board")
                        .WithMany("BoardTasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.UserBoardRole", b =>
                {
                    b.HasOne("TaskSchedule.DAL.Models.Board", "Board")
                        .WithMany("UserBoardRoles")
                        .HasForeignKey("BoardId");

                    b.HasOne("TaskSchedule.DAL.Models.Role", "Role")
                        .WithMany("UserBoardRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("TaskSchedule.DAL.Models.User", "User")
                        .WithMany("UserBoardRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Board");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.Board", b =>
                {
                    b.Navigation("BoardTasks");

                    b.Navigation("UserBoardRoles");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.Role", b =>
                {
                    b.Navigation("UserBoardRoles");
                });

            modelBuilder.Entity("TaskSchedule.DAL.Models.User", b =>
                {
                    b.Navigation("BoardTasks");

                    b.Navigation("Boards");

                    b.Navigation("UserBoardRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
